console.log('üîß SAFE script starting...');

var elements = {};

window.addEventListener('load', function() {
    console.log('üì± Window loaded');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    elements.auction = document.getElementById('auction');
    elements.location = document.getElementById('location');
    elements.portLoading = document.getElementById('portLoading');
    elements.portArrival = document.getElementById('portArrival');
    elements.destination = document.getElementById('destination');
    elements.calculateBtn = document.getElementById('calculateBtn');
    elements.markup = document.getElementById('markup');
    elements.resultSection = document.getElementById('resultSection');
    elements.priceBreakdown = document.getElementById('priceBreakdown');
    elements.finalAmount = document.getElementById('finalAmount');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
    for (var key in elements) {
        if (!elements[key]) {
            console.error('‚ùå Element not found:', key);
            alert('Element not found: ' + key);
            return;
        }
    }
    
    console.log('‚úÖ All elements found');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (typeof locationData === 'undefined') {
        console.error('‚ùå locationData not found');
        alert('locationData not found - check data.js');
        return;
    }
    
    console.log('‚úÖ locationData found with keys:', Object.keys(locationData));
    
    // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
    elements.auction.addEventListener('change', function() {
        console.log('üè¢ Auction changed to:', this.value);
        
        try {
            var auctionId = this.value;
            updateSelectedText('selectedAuction', this.options[this.selectedIndex].text);
            
            if (auctionId && locationData[auctionId]) {
                var locations = locationData[auctionId];
                console.log('üìç Found', locations.length, 'locations for auction', auctionId);
                
                elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
                for (var i = 0; i < locations.length; i++) {
                    var loc = locations[i];
                    var option = document.createElement('option');
                    option.value = loc.value;
                    option.textContent = loc.text;
                    option.setAttribute('data-land-cost', loc.landCost);
                    elements.location.appendChild(option);
                }
                
                elements.location.disabled = false;
                console.log('‚úÖ Locations loaded');
                
            } else {
                elements.location.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω</option>';
                elements.location.disabled = true;
            }
            
        } catch (error) {
            console.error('‚ùå Error in auction handler:', error);
            alert('Error: ' + error.message);
        }
    });
    
    // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏
    elements.location.addEventListener('change', function() {
        console.log('üìç Location changed to:', this.value);
        
        try {
            updateSelectedText('selectedLocation', this.options[this.selectedIndex].text);
            
            if (this.value) {
                // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
                elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>';
                
                if (typeof portData !== 'undefined' && portData.loading) {
                    for (var i = 0; i < portData.loading.length; i++) {
                        var port = portData.loading[i];
                        var option = document.createElement('option');
                        option.value = port.value;
                        option.textContent = port.text;
                        elements.portLoading.appendChild(option);
                    }
                    elements.portLoading.disabled = false;
                    console.log('‚úÖ Ports loaded');
                } else {
                    console.error('‚ùå portData not found');
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error in location handler:', error);
            alert('Location error: ' + error.message);
        }
    });
    
    console.log('üéâ Setup complete');
});

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function updateSelectedText(elementId, text) {
    try {
        var element = document.getElementById(elementId);
        if (element) {
            element.textContent = text || '–ù–µ –≤—ã–±—Ä–∞–Ω';
        }
    } catch (error) {
        console.error('Error updating text:', error);
    }
}

console.log('‚úÖ SAFE script loaded');
