console.log('üîß SAFE script starting...');

var elements = {};

window.addEventListener('load', function() {
    console.log('üì± Window loaded');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    elements.auction = document.getElementById('auction');
    elements.location = document.getElementById('location');
    elements.portLoading = document.getElementById('portLoading');
    elements.portArrival = document.getElementById('portArrival');
    elements.destination = document.getElementById('destination');
    elements.calculateBtn = document.getElementById('calculateBtn');
    elements.markup = document.getElementById('markup');
    elements.resultSection = document.getElementById('resultSection');
    elements.priceBreakdown = document.getElementById('priceBreakdown');
    elements.finalAmount = document.getElementById('finalAmount');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
    for (var key in elements) {
        if (!elements[key]) {
            console.error('‚ùå Element not found:', key);
            alert('Element not found: ' + key);
            return;
        }
    }
    
    console.log('‚úÖ All elements found');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (typeof locationData === 'undefined') {
        console.error('‚ùå locationData not found');
        alert('locationData not found - check data.js');
        return;
    }
    
    console.log('‚úÖ locationData found with keys:', Object.keys(locationData));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
    elements.auction.addEventListener('change', function() {
        console.log('üè¢ Auction changed to:', this.value);
        
        try {
            var auctionId = this.value;
            updateSelectedText('selectedAuction', this.options[this.selectedIndex].text);
            
            if (auctionId && locationData[auctionId]) {
                var locations = locationData[auctionId];
                console.log('üìç Found', locations.length, 'locations for auction', auctionId);
                
                elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
                for (var i = 0; i < locations.length; i++) {
                    var loc = locations[i];
                    var option = document.createElement('option');
                    option.value = loc.value;
                    option.textContent = loc.text;
                    option.setAttribute('data-land-cost', loc.landCost);
                    elements.location.appendChild(option);
                }
                
                elements.location.disabled = false;
                console.log('‚úÖ Locations loaded');
                
            } else {
                elements.location.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω</option>';
                elements.location.disabled = true;
            }
            
        } catch (error) {
            console.error('‚ùå Error in auction handler:', error);
            alert('Error: ' + error.message);
        }
    }); // –ó–ê–ö–†–´–í–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ –∑–¥–µ—Å—å!
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞—Ü–∏–∏ (–æ—Ç–¥–µ–ª—å–Ω–æ!)
    elements.location.addEventListener('change', function() {
        console.log('üìç Location changed to:', this.value);
        
        try {
            updateSelectedText('selectedLocation', this.options[this.selectedIndex].text);
            
            if (this.value) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
                var auctionId = elements.auction.value;
                var locationId = this.value;
                var selectedLocation = null;
                
                // –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö
                if (locationData[auctionId]) {
                    for (var i = 0; i < locationData[auctionId].length; i++) {
                        if (locationData[auctionId][i].value === locationId) {
                            selectedLocation = locationData[auctionId][i];
                            break;
                        }
                    }
                }
                
                console.log('üéØ Selected location data:', selectedLocation);
                
                elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>';
                
                if (selectedLocation && selectedLocation.ports && selectedLocation.ports.length > 0) {
                    // –£–ú–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
                    console.log('üéØ Available ports for this location:', selectedLocation.ports);
                    
                    if (typeof portData !== 'undefined' && portData.loading) {
                        for (var i = 0; i < portData.loading.length; i++) {
                            var port = portData.loading[i];
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
                            if (selectedLocation.ports.indexOf(port.value) !== -1) {
                                var option = document.createElement('option');
                                option.value = port.value;
                                option.textContent = port.text;
                                elements.portLoading.appendChild(option);
                                console.log('‚úÖ Added smart port:', port.text);
                            }
                        }
                        elements.portLoading.disabled = false;
                        console.log('‚úÖ Smart ports loaded');
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                    console.log('‚ö†Ô∏è No port restrictions, showing all ports');
                    if (typeof portData !== 'undefined' && portData.loading) {
                        for (var i = 0; i < portData.loading.length; i++) {
                            var port = portData.loading[i];
                            var option = document.createElement('option');
                            option.value = port.value;
                            option.textContent = port.text;
                            elements.portLoading.appendChild(option);
                        }
                        elements.portLoading.disabled = false;
                    }
                }
            }
            
            checkFormComplete();
            
        } catch (error) {
            console.error('‚ùå Error in location handler:', error);
            alert('Location error: ' + error.message);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elements.destination.addEventListener('change', function() {
        console.log('üåç Destination changed to:', this.value);
        
        try {
            if (this.value) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ç—ã –ø—Ä–∏–±—ã—Ç–∏—è
                elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è</option>';
                
                if (typeof portData !== 'undefined' && portData.arrival && portData.arrival[this.value]) {
                    var ports = portData.arrival[this.value];
                    console.log('‚öì Found', ports.length, 'arrival ports for', this.value);
                    
                    for (var i = 0; i < ports.length; i++) {
                        var port = ports[i];
                        var option = document.createElement('option');
                        option.value = port.value;
                        option.textContent = port.text;
                        elements.portArrival.appendChild(option);
                    }
                    elements.portArrival.disabled = false;
                    console.log('‚úÖ Arrival ports loaded');
                } else {
                    console.error('‚ùå No arrival ports found for:', this.value);
                }
            } else {
                elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>';
                elements.portArrival.disabled = true;
            }
            
            updateSelectedText('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω');
            checkFormComplete();
            
        } catch (error) {
            console.error('‚ùå Error in destination handler:', error);
            alert('Destination error: ' + error.message);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç–æ–≤
    elements.portLoading.addEventListener('change', function() {
        console.log('üö¢ Loading port changed to:', this.value);
        updateSelectedText('selectedPortLoading', this.options[this.selectedIndex].text);
        checkFormComplete();
    });

    elements.portArrival.addEventListener('change', function() {
        console.log('‚öì Arrival port changed to:', this.value);
        updateSelectedText('selectedPortArrival', this.options[this.selectedIndex].text);
        checkFormComplete();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
    elements.calculateBtn.addEventListener('click', function() {
        if (!this.disabled) {
            console.log('üßÆ Calculate clicked');
            calculatePrice();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ü–µ–Ω–∫–∏
    elements.markup.addEventListener('input', function() {
        if (elements.resultSection.classList.contains('show')) {
            updateFinalPrice();
        }
    });
    
    console.log('üéâ All event handlers set up');
    
}); // –ó–ê–ö–†–´–í–ê–ï–ú window.addEventListener –∑–¥–µ—Å—å!

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã
function checkFormComplete() {
    try {
        var isComplete = elements.auction.value && 
                        elements.location.value && 
                        elements.portLoading.value && 
                        elements.destination.value &&
                        elements.portArrival.value;
        
        elements.calculateBtn.disabled = !isComplete;
        
        if (isComplete) {
            elements.calculateBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';
            elements.calculateBtn.innerHTML = 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
            console.log('‚úÖ Form is complete');
        } else {
            elements.calculateBtn.style.background = 'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)';
            elements.calculateBtn.innerHTML = 'üîí –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
        }
    } catch (error) {
        console.error('Error checking form:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞
function calculatePrice() {
    console.log('üßÆ Calculating price...');
    
    try {
        var auctionId = elements.auction.value;
        var destination = elements.destination.value;
        var portLoadingId = elements.portLoading.value;
        var portArrivalId = elements.portArrival.value;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É—à–∏
        var selectedLocationOption = elements.location.options[elements.location.selectedIndex];
        var landCost = parseInt(selectedLocationOption.getAttribute('data-land-cost')) || 0;
        
        console.log('üöõ Land cost:', landCost);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–µ–∞–Ω–∞
        var oceanCost = 0;
        if (oceanPrices[destination] && oceanPrices[destination][portArrivalId]) {
            oceanCost = oceanPrices[destination][portArrivalId][portLoadingId] || 0;
        }
        
        console.log('üö¢ Ocean cost:', oceanCost);
        
        // SUBLOT –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (auctionId === '30' || auctionId === '31') {
            showError('SUBLOT –∞—É–∫—Ü–∏–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (landCost === 0 && oceanCost === 0) {
            showError('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }
        
        // –†–∞—Å—á–µ—Ç
        var dealerFee = 100;
        var portServices = destination === 'Lithuania' ? 300 : 0;
        var totalDelivery = landCost + oceanCost + dealerFee + portServices;
        var userMarkup = parseInt(elements.markup.value) || 0;
        var finalPrice = totalDelivery + userMarkup;
        
        console.log('üí∞ Final calculation:', {
            landCost: landCost,
            oceanCost: oceanCost,
            dealerFee: dealerFee,
            portServices: portServices,
            totalDelivery: totalDelivery,
            userMarkup: userMarkup,
            finalPrice: finalPrice
        });
        
        showResult({
            landCost: landCost,
            oceanCost: oceanCost,
            dealerFee: dealerFee,
            portServices: portServices,
            totalDelivery: totalDelivery,
            userMarkup: userMarkup,
            finalPrice: finalPrice
        });
        
    } catch (error) {
        console.error('‚ùå Calculation error:', error);
        showError('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ' + error.message);
    }
}

function showResult(prices) {
    var html = '';
    
    if (prices.landCost > 0) {
        html += '<div class="price-item"><span>üöõ –î–æ—Å—Ç–∞–≤–∫–∞ —Å—É—à–∞:</span><span>$' + prices.landCost + '</span></div>';
    }
    
    if (prices.oceanCost > 0) {
        html += '<div class="price-item"><span>üö¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–∫–µ–∞–Ω:</span><span>$' + prices.oceanCost + '</span></div>';
    }
    
    if (prices.dealerFee > 0) {
        html += '<div class="price-item"><span>üè¢ –£—Å–ª—É–≥–∏ –¥–∏–ª–µ—Ä–∞:</span><span>$' + prices.dealerFee + '</span></div>';
    }
    
    if (prices.portServices > 0) {
        html += '<div class="price-item"><span>‚öì –ü–æ—Ä—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏:</span><span>$' + prices.portServices + '</span></div>';
    }
    
    html += '<div class="price-item"><span>üìã –ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞:</span><span><strong>$' + prices.totalDelivery + '</strong></span></div>';
    
    if (prices.userMarkup > 0) {
        html += '<div class="price-item markup"><span>üí∞ –í–∞—à–∞ –Ω–∞—Ü–µ–Ω–∫–∞:</span><span>$' + prices.userMarkup + '</span></div>';
    }
    
    html += '<div class="price-item total"><span>üéØ –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ:</span><span>$' + prices.finalPrice + '</span></div>';
    
    elements.priceBreakdown.innerHTML = html;
    elements.finalAmount.textContent = '$' + prices.finalPrice;
    elements.resultSection.classList.add('show');
    
    console.log('‚úÖ Results displayed');
}

function showError(message) {
    console.log('‚ùå Showing error:', message);
    elements.priceBreakdown.innerHTML = '<div class="error"><strong>‚ö†Ô∏è –û—à–∏–±–∫–∞:</strong> ' + message + '</div>';
    elements.finalAmount.textContent = '$0';
    elements.resultSection.classList.add('show');
}

function updateFinalPrice() {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏
    var markupValue = parseInt(elements.markup.value) || 0;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function updateSelectedText(elementId, text) {
    try {
        var element = document.getElementById(elementId);
        if (element) {
            element.textContent = text || '–ù–µ –≤—ã–±—Ä–∞–Ω';
        }
    } catch (error) {
        console.error('Error updating text:', error);
    }
}

console.log('‚úÖ SAFE script loaded');
