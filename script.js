console.log('üîß SAFE script starting...');

var elements = {};

window.addEventListener('load', function() {
    console.log('üì± Window loaded');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    elements.auction = document.getElementById('auction');
    elements.location = document.getElementById('location');
    elements.portLoading = document.getElementById('portLoading');
    elements.portArrival = document.getElementById('portArrival');
    elements.destination = document.getElementById('destination');
    elements.calculateBtn = document.getElementById('calculateBtn');
    elements.markup = document.getElementById('markup');
    elements.resultSection = document.getElementById('resultSection');
    elements.priceBreakdown = document.getElementById('priceBreakdown');
    elements.finalAmount = document.getElementById('finalAmount');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
    for (var key in elements) {
        if (!elements[key]) {
            console.error('‚ùå Element not found:', key);
            alert('Element not found: ' + key);
            return;
        }
    }
    
    console.log('‚úÖ All elements found');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (typeof locationData === 'undefined') {
        console.error('‚ùå locationData not found');
        alert('locationData not found - check data.js');
        return;
    }
    
    console.log('‚úÖ locationData found with keys:', Object.keys(locationData));
    
    // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–∫—Ü–∏–æ–Ω–∞
    elements.auction.addEventListener('change', function() {
        console.log('üè¢ Auction changed to:', this.value);
        
        try {
            var auctionId = this.value;
            updateSelectedText('selectedAuction', this.options[this.selectedIndex].text);
            
            if (auctionId && locationData[auctionId]) {
                var locations = locationData[auctionId];
                console.log('üìç Found', locations.length, 'locations for auction', auctionId);
                
                elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏–∏
                for (var i = 0; i < locations.length; i++) {
                    var loc = locations[i];
                    var option = document.createElement('option');
                    option.value = loc.value;
                    option.textContent = loc.text;
                    option.setAttribute('data-land-cost', loc.landCost);
                    elements.location.appendChild(option);
                }
                
                elements.location.disabled = false;
                console.log('‚úÖ Locations loaded');
                
            } else {
                elements.location.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω</option>';
                elements.location.disabled = true;
            }
            
        } catch (error) {
            console.error('‚ùå Error in auction handler:', error);
            alert('Error: ' + error.message);
        }
    });
    
    elements.location.addEventListener('change', function() {
    console.log('üìç Location changed to:', this.value);
    
    try {
        updateSelectedText('selectedLocation', this.options[this.selectedIndex].text);
        
        if (this.value) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            var auctionId = elements.auction.value;
            var locationId = this.value;
            var selectedLocation = null;
            
            // –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö
            if (locationData[auctionId]) {
                for (var i = 0; i < locationData[auctionId].length; i++) {
                    if (locationData[auctionId][i].value === locationId) {
                        selectedLocation = locationData[auctionId][i];
                        break;
                    }
                }
            }
            
            console.log('üéØ Selected location data:', selectedLocation);
            
            elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>';
            
            if (selectedLocation && selectedLocation.ports && selectedLocation.ports.length > 0) {
                // –£–ú–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
                console.log('üéØ Available ports for this location:', selectedLocation.ports);
                
                if (typeof portData !== 'undefined' && portData.loading) {
                    for (var i = 0; i < portData.loading.length; i++) {
                        var port = portData.loading[i];
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
                        if (selectedLocation.ports.indexOf(port.value) !== -1) {
                            var option = document.createElement('option');
                            option.value = port.value;
                            option.textContent = port.text;
                            elements.portLoading.appendChild(option);
                            console.log('‚úÖ Added smart port:', port.text);
                        }
                    }
                    elements.portLoading.disabled = false;
                    console.log('‚úÖ Smart ports loaded');
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
                console.log('‚ö†Ô∏è No port restrictions, showing all ports');
                if (typeof portData !== 'undefined' && portData.loading) {
                    for (var i = 0; i < portData.loading.length; i++) {
                        var port = portData.loading[i];
                        var option = document.createElement('option');
                        option.value = port.value;
                        option.textContent = port.text;
                        elements.portLoading.appendChild(option);
                    }
                    elements.portLoading.disabled = false;
                }
            }
        }
        
        checkFormComplete();
        
    } catch (error) {
        console.error('‚ùå Error in location handler:', error);
        alert('Location error: ' + error.message);
    }
});
elements.destination.addEventListener('change', function() {
    console.log('üåç Destination changed to:', this.value);
    
    try {
        if (this.value) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ç—ã –ø—Ä–∏–±—ã—Ç–∏—è
            elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è</option>';
            
            if (typeof portData !== 'undefined' && portData.arrival && portData.arrival[this.value]) {
                var ports = portData.arrival[this.value];
                console.log('‚öì Found', ports.length, 'arrival ports for', this.value);
                
                for (var i = 0; i < ports.length; i++) {
                    var port = ports[i];
                    var option = document.createElement('option');
                    option.value = port.value;
                    option.textContent = port.text;
                    elements.portArrival.appendChild(option);
                }
                elements.portArrival.disabled = false;
                console.log('‚úÖ Arrival ports loaded');
            } else {
                console.error('‚ùå No arrival ports found for:', this.value);
            }
        } else {
            elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>';
            elements.portArrival.disabled = true;
        }
        
        updateSelectedText('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω');
        checkFormComplete();
        
    } catch (error) {
        console.error('‚ùå Error in destination handler:', error);
        alert('Destination error: ' + error.message);
    }
});

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Ä—Ç–æ–≤
elements.portLoading.addEventListener('change', function() {
    console.log('üö¢ Loading port changed to:', this.value);
    updateSelectedText('selectedPortLoading', this.options[this.selectedIndex].text);
    checkFormComplete();
});

elements.portArrival.addEventListener('change', function() {
    console.log('‚öì Arrival port changed to:', this.value);
    updateSelectedText('selectedPortArrival', this.options[this.selectedIndex].text);
    checkFormComplete();
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã
function checkFormComplete() {
    try {
        var isComplete = elements.auction.value && 
                        elements.location.value && 
                        elements.portLoading.value && 
                        elements.destination.value &&
                        elements.portArrival.value;
        
        elements.calculateBtn.disabled = !isComplete;
        
        if (isComplete) {
            elements.calculateBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';
            elements.calculateBtn.innerHTML = 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
            console.log('‚úÖ Form is complete');
        } else {
            elements.calculateBtn.style.background = 'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)';
            elements.calculateBtn.innerHTML = 'üîí –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
        }
    } catch (error) {
        console.error('Error checking form:', error);
    }
}
// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function updateSelectedText(elementId, text) {
    try {
        var element = document.getElementById(elementId);
        if (element) {
            element.textContent = text || '–ù–µ –≤—ã–±—Ä–∞–Ω';
        }
    } catch (error) {
        console.error('Error updating text:', error);
    }
}

console.log('‚úÖ SAFE script loaded');
