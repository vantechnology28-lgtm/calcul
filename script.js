console.log('üîß Script.js with smart port logic starting...');

var elements = null;
var currentSelectedLocation = null;

window.addEventListener('load', function() {
    console.log('üì± Window loaded, starting init...');
    setTimeout(function() {
        initCalculator();
    }, 100);
});

function initCalculator() {
    console.log('üöÄ Initializing smart calculator...');
    
    if (typeof locationData === 'undefined') {
        console.error('‚ùå locationData not found!');
        alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    console.log('‚úÖ Data check passed');
    
    elements = {
        auction: document.getElementById('auction'),
        location: document.getElementById('location'),
        portLoading: document.getElementById('portLoading'),
        portArrival: document.getElementById('portArrival'),
        destination: document.getElementById('destination'),
        calculateBtn: document.getElementById('calculateBtn'),
        markup: document.getElementById('markup'),
        resultSection: document.getElementById('resultSection'),
        priceBreakdown: document.getElementById('priceBreakdown'),
        finalAmount: document.getElementById('finalAmount')
    };
    
    for (var key in elements) {
        if (!elements[key]) {
            console.error('‚ùå Element not found:', key);
            return;
        }
    }
    
    console.log('‚úÖ All elements found');
    setupEvents();
    checkForm();
    console.log('üéâ Smart calculator ready!');
}

function setupEvents() {
    console.log('üîó Setting up smart events...');
    
    // –ê—É–∫—Ü–∏–æ–Ω
    elements.auction.addEventListener('change', function() {
        console.log('üè¢ Auction selected:', this.value);
        var auctionId = this.value;
        updateDisplay('selectedAuction', this.options[this.selectedIndex].text);
        
        if (auctionId) {
            loadLocations(auctionId);
            elements.location.disabled = false;
            elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
            resetDependentFields(['location', 'portLoading', 'portArrival']);
        } else {
            clearSelect(elements.location, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω');
            resetDependentFields(['location', 'portLoading', 'portArrival']);
        }
        checkForm();
    });

    // –õ–æ–∫–∞—Ü–∏—è - –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!
    elements.location.addEventListener('change', function() {
        console.log('üìç Location selected:', this.value);
        var locationId = this.value;
        var selectedText = this.options[this.selectedIndex] ? this.options[this.selectedIndex].text : '–ù–µ –≤—ã–±—Ä–∞–Ω–∞';
        updateDisplay('selectedLocation', selectedText);
        
        if (locationId) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
            currentSelectedLocation = getLocationById(locationId);
            console.log('üó∫Ô∏è Selected location data:', currentSelectedLocation);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ (–£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê)
            loadPortsForLocation(currentSelectedLocation);
            elements.portLoading.disabled = false;
        } else {
            currentSelectedLocation = null;
            clearSelect(elements.portLoading, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é');
            resetDependentFields(['portLoading', 'portArrival']);
        }
        checkForm();
    });

    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    elements.destination.addEventListener('change', function() {
        console.log('üåç Destination selected:', this.value);
        
        if (this.value) {
            loadArrivalPorts(this.value);
            elements.portArrival.disabled = false;
        } else {
            clearSelect(elements.portArrival, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
            updateDisplay('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω');
        }
        checkForm();
    });

    // –ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elements.portLoading.addEventListener('change', function() {
        console.log('üö¢ Loading port selected:', this.value);
        var selectedText = this.options[this.selectedIndex] ? this.options[this.selectedIndex].text : '–ù–µ –≤—ã–±—Ä–∞–Ω';
        updateDisplay('selectedPortLoading', selectedText);
        checkForm();
    });

    // –ü–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è
    elements.portArrival.addEventListener('change', function() {
        console.log('‚öì Arrival port selected:', this.value);
        var selectedText = this.options[this.selectedIndex] ? this.options[this.selectedIndex].text : '–ù–µ –≤—ã–±—Ä–∞–Ω';
        updateDisplay('selectedPortArrival', selectedText);
        checkForm();
    });

    // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
    elements.calculateBtn.addEventListener('click', function() {
        if (!this.disabled) {
            console.log('üßÆ Calculate clicked');
            calculatePrice();
        }
    });

    // –ù–∞—Ü–µ–Ω–∫–∞
    elements.markup.addEventListener('input', function() {
        if (elements.resultSection.classList.contains('show')) {
            updateFinalPrice();
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ ID
function getLocationById(locationId) {
    var auctionId = elements.auction.value;
    var locations = locationData[auctionId] || [];
    
    for (var i = 0; i < locations.length; i++) {
        if (locations[i].value === locationId) {
            return locations[i];
        }
    }
    return null;
}

// –£–ú–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
function loadPortsForLocation(location) {
    console.log('üö¢ Loading smart ports for location:', location ? location.text : 'null');
    
    if (!location || !location.ports || location.ports.length === 0) {
        console.log('‚ö†Ô∏è No ports defined for this location');
        elements.portLoading.innerHTML = '<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤</option>';
        elements.portLoading.disabled = true;
        return;
    }
    
    elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—ã
    var availablePorts = location.ports;
    console.log('üéØ Available ports for this location:', availablePorts);
    
    portData.loading.forEach(function(port) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç—Ç–æ—Ç –ø–æ—Ä—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        if (availablePorts.indexOf(port.value) !== -1) {
            var option = document.createElement('option');
            option.value = port.value;
            option.textContent = port.text;
            elements.portLoading.appendChild(option);
            console.log('‚úÖ Added port:', port.text);
        }
    });
    
    console.log('‚úÖ Smart ports loaded successfully');
}

function loadLocations(auctionId) {
    console.log('üìç Loading locations for auction:', auctionId);
    
    var locations = locationData[auctionId] || [];
    console.log('üìç Found', locations.length, 'locations');
    
    elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
    
    for (var i = 0; i < locations.length; i++) {
        var location = locations[i];
        var option = document.createElement('option');
        option.value = location.value;
        option.textContent = location.text;
        option.setAttribute('data-land-cost', location.landCost);
        elements.location.appendChild(option);
    }
    
    console.log('‚úÖ Locations loaded successfully');
}

function loadArrivalPorts(destination) {
    console.log('‚öì Loading arrival ports for:', destination);
    
    elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è</option>';
    
    var ports = portData.arrival[destination] || [];
    for (var i = 0; i < ports.length; i++) {
        var port = ports[i];
        var option = document.createElement('option');
        option.value = port.value;
        option.textContent = port.text;
        elements.portArrival.appendChild(option);
    }
    
    console.log('‚úÖ Arrival ports loaded');
}

function clearSelect(select, text) {
    select.innerHTML = '<option value="">' + text + '</option>';
    select.disabled = true;
}

function resetDependentFields(fields) {
    var fieldMap = {
        'location': function() { updateDisplay('selectedLocation', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'); },
        'portLoading': function() { updateDisplay('selectedPortLoading', '–ù–µ –≤—ã–±—Ä–∞–Ω'); },
        'portArrival': function() { updateDisplay('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω'); }
    };
    
    fields.forEach(function(field) {
        if (fieldMap[field]) fieldMap[field]();
    });
}

function updateDisplay(elementId, text) {
    var element = document.getElementById(elementId);
    if (element) {
        element.textContent = text === '' ? '–ù–µ –≤—ã–±—Ä–∞–Ω' : text;
    }
}

function checkForm() {
    var isComplete = elements.auction.value && 
                    elements.location.value && 
                    elements.portLoading.value && 
                    elements.destination.value &&
                    elements.portArrival.value;
    
    elements.calculateBtn.disabled = !isComplete;
    
    if (isComplete) {
        elements.calculateBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';
        elements.calculateBtn.innerHTML = 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
    } else {
        elements.calculateBtn.style.background = 'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)';
        elements.calculateBtn.innerHTML = 'üîí –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
    }
}

function calculatePrice() {
    console.log('üßÆ Calculating price...');
    
    try {
        var auctionId = elements.auction.value;
        var destination = elements.destination.value;
        var portLoadingId = elements.portLoading.value;
        var portArrivalId = elements.portArrival.value;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É—à–∏
        var selectedLocationOption = elements.location.options[elements.location.selectedIndex];
        var landCost = parseInt(selectedLocationOption.getAttribute('data-land-cost')) || 0;
        
        console.log('üöõ Land cost:', landCost);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–µ–∞–Ω–∞
        var oceanCost = 0;
        if (oceanPrices[destination] && oceanPrices[destination][portArrivalId]) {
            oceanCost = oceanPrices[destination][portArrivalId][portLoadingId] || 0;
        }
        
        console.log('üö¢ Ocean cost:', oceanCost);
        
        // SUBLOT –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (auctionId === '30' || auctionId === '31') {
            showError('SUBLOT –∞—É–∫—Ü–∏–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (landCost === 0 && oceanCost === 0) {
            showError('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }
        
        // –†–∞—Å—á–µ—Ç
        var dealerFee = 100;
        var portServices = destination === 'Lithuania' ? 300 : 0;
        var totalDelivery = landCost + oceanCost + dealerFee + portServices;
        var userMarkup = parseInt(elements.markup.value) || 0;
        var finalPrice = totalDelivery + userMarkup;
        
        console.log('üí∞ Smart calculation result:', {
            landCost: landCost,
            oceanCost: oceanCost,
            dealerFee: dealerFee,
            portServices: portServices,
            totalDelivery: totalDelivery,
            userMarkup: userMarkup,
            finalPrice: finalPrice
        });
        
        showResult({
            landCost: landCost,
            oceanCost: oceanCost,
            dealerFee: dealerFee,
            portServices: portServices,
            totalDelivery: totalDelivery,
            userMarkup: userMarkup,
            finalPrice: finalPrice
        });
        
    } catch (error) {
        console.error('‚ùå Calculation error:', error);
        showError('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ' + error.message);
    }
}

function showResult(prices) {
    console.log('üìã Showing smart results');
    
    var html = '';
    
    if (prices.landCost > 0) {
        html += '<div class="price-item"><span>üöõ –î–æ—Å—Ç–∞–≤–∫–∞ —Å—É—à–∞:</span><span>$' + prices.landCost + '</span></div>';
    }
    
    if (prices.oceanCost > 0) {
        html += '<div class="price-item"><span>üö¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–∫–µ–∞–Ω:</span><span>$' + prices.oceanCost + '</span></div>';
    }
    
    if (prices.dealerFee > 0) {
        html += '<div class="price-item"><span>üè¢ –£—Å–ª—É–≥–∏ –¥–∏–ª–µ—Ä–∞:</span><span>$' + prices.dealerFee + '</span></div>';
    }
    
    if (prices.portServices > 0) {
        html += '<div class="price-item"><span>‚öì –ü–æ—Ä—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏:</span><span>$' + prices.portServices + '</span></div>';
    }
    
    html += '<div class="price-item"><span>üìã –ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞:</span><span><strong>$' + prices.totalDelivery + '</strong></span></div>';
    
    if (prices.userMarkup > 0) {
        html += '<div class="price-item markup"><span>üí∞ –í–∞—à–∞ –Ω–∞—Ü–µ–Ω–∫–∞:</span><span>$' + prices.userMarkup + '</span></div>';
    }
    
    html += '<div class="price-item total"><span>üéØ –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ:</span><span>$' + prices.finalPrice + '</span></div>';
    
    elements.priceBreakdown.innerHTML = html;
    elements.finalAmount.textContent = '$' + prices.finalPrice;
    elements.resultSection.classList.add('show');
    
    console.log('‚úÖ Smart results displayed');
}

function showError(message) {
    console.log('‚ùå Showing error:', message);
    elements.priceBreakdown.innerHTML = '<div class="error"><strong>‚ö†Ô∏è –û—à–∏–±–∫–∞:</strong> ' + message + '</div>';
    elements.finalAmount.textContent = '$0';
    elements.resultSection.classList.add('show');
}

function updateFinalPrice() {
    if (!elements.resultSection.classList.contains('show')) return;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        var totalItems = elements.priceBreakdown.querySelectorAll('.price-item');
        var totalDelivery = 0;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞"
        totalItems.forEach(function(item) {
            var text = item.textContent;
            if (text.includes('–ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞:')) {
                var priceMatch = text.match(/\$(\d+)/);
                if (priceMatch) {
                    totalDelivery = parseInt(priceMatch[1]);
                }
            }
        });
        
        var userMarkup = parseInt(elements.markup.value) || 0;
        var finalPrice = totalDelivery + userMarkup;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –∏ –∏—Ç–æ–≥–∞
        var markupItem = elements.priceBreakdown.querySelector('.price-item.markup span:last-child');
        var totalItem = elements.priceBreakdown.querySelector('.price-item.total span:last-child');
        
        if (markupItem) markupItem.textContent = '$' + userMarkup;
        if (totalItem) totalItem.textContent = '$' + finalPrice;
        
        elements.finalAmount.textContent = '$' + finalPrice;
        
    } catch (error) {
        console.error('Error updating final price:', error);
    }
}

console.log('‚úÖ Smart script.js loaded successfully');
