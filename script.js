// –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
const elements = {
    auction: document.getElementById('auction'),
    location: document.getElementById('location'),
    portLoading: document.getElementById('portLoading'),
    portArrival: document.getElementById('portArrival'),
    destination: document.getElementById('destination'),
    calculateBtn: document.getElementById('calculateBtn'),
    markup: document.getElementById('markup'),
    resultSection: document.getElementById('resultSection'),
    priceBreakdown: document.getElementById('priceBreakdown'),
    finalAmount: document.getElementById('finalAmount')
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
elements.auction.addEventListener('change', function() {
    const auctionId = this.value;
    updateDisplay('selectedAuction', this.options[this.selectedIndex].text);
    
    if (auctionId) {
        populateLocations(auctionId);
        elements.location.disabled = false;
        elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
        resetDependentFields(['location', 'portLoading', 'portArrival']);
    } else {
        clearSelect(elements.location, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω');
        resetDependentFields(['location', 'portLoading', 'portArrival']);
    }
    checkForm();
});

elements.location.addEventListener('change', function() {
    updateDisplay('selectedLocation', this.options[this.selectedIndex]?.text || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞');
    
    if (this.value) {
        populatePorts();
        elements.portLoading.disabled = false;
    } else {
        clearSelect(elements.portLoading, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é');
        resetDependentFields(['portLoading', 'portArrival']);
    }
    checkForm();
});

elements.portLoading.addEventListener('change', function() {
    updateDisplay('selectedPortLoading', this.options[this.selectedIndex]?.text || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    checkForm();
});

elements.destination.addEventListener('change', function() {
    const destination = this.value;
    
    if (destination) {
        populateArrivalPorts(destination);
        elements.portArrival.disabled = false;
    } else {
        clearSelect(elements.portArrival, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
        updateDisplay('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω');
    }
    checkForm();
});

elements.portArrival.addEventListener('change', function() {
    updateDisplay('selectedPortArrival', this.options[this.selectedIndex]?.text || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    checkForm();
});

elements.calculateBtn.addEventListener('click', function() {
    if (!this.disabled) {
        calculatePrice();
    }
});

elements.markup.addEventListener('input', function() {
    if (elements.resultSection.classList.contains('show')) {
        updateFinalPrice();
    }
});

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π
function populateLocations(auctionId) {
    const locations = locationData[auctionId] || [];
    elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
    
    locations.forEach(location => {
        const option = document.createElement('option');
        option.value = location.value;
        option.textContent = location.text;
        option.dataset.landCost = location.landCost;
        elements.location.appendChild(option);
    });
}

function populatePorts() {
    elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>';
    
    portData.loading.forEach(port => {
        const option = document.createElement('option');
        option.value = port.value;
        option.textContent = port.text;
        elements.portLoading.appendChild(option);
    });
}

function populateArrivalPorts(destination) {
    elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è</option>';
    
    const ports = portData.arrival[destination] || [];
    ports.forEach(port => {
        const option = document.createElement('option');
        option.value = port.value;
        option.textContent = port.text;
        elements.portArrival.appendChild(option);
    });
}

function clearSelect(select, text) {
    select.innerHTML = `<option value="">${text}</option>`;
    select.disabled = true;
}

function resetDependentFields(fields) {
    const fieldMap = {
        'location': () => updateDisplay('selectedLocation', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'),
        'portLoading': () => updateDisplay('selectedPortLoading', '–ù–µ –≤—ã–±—Ä–∞–Ω'),
        'portArrival': () => updateDisplay('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω')
    };
    
    fields.forEach(field => {
        if (fieldMap[field]) fieldMap[field]();
    });
}

function updateDisplay(elementId, text) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = text === '' ? '–ù–µ –≤—ã–±—Ä–∞–Ω' : text;
    }
}

function checkForm() {
    const isComplete = elements.auction.value && 
                     elements.location.value && 
                     elements.portLoading.value && 
                     elements.destination.value &&
                     elements.portArrival.value;
    
    elements.calculateBtn.disabled = !isComplete;
    
    if (isComplete) {
        elements.calculateBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';
        elements.calculateBtn.innerHTML = 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
    } else {
        elements.calculateBtn.style.background = 'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)';
        elements.calculateBtn.innerHTML = 'üîí –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
function calculatePrice() {
    try {
        const auctionId = elements.auction.value;
        const locationId = elements.location.value;
        const portLoadingId = elements.portLoading.value;
        const portArrivalId = elements.portArrival.value;
        const destination = elements.destination.value;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—É—à–∞
        const selectedOption = elements.location.options[elements.location.selectedIndex];
        const landCost = parseInt(selectedOption.dataset.landCost) || 0;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–µ–∞–Ω—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        let oceanCost = 0;
        if (oceanPrices[destination] && oceanPrices[destination][portArrivalId]) {
            oceanCost = oceanPrices[destination][portArrivalId][portLoadingId] || 0;
        }
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        const dealerFee = 100;
        const portServices = destination === 'Lithuania' ? 300 : 0;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        if (oceanCost > 50000) {
            displayError('–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è.');
            return;
        }
        
        if (landCost === 0 && oceanCost === 0) {
            displayError('–î–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
            return;
        }
        
        // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏
        const totalDelivery = landCost + oceanCost + dealerFee + portServices;
        
        // –ù–∞—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMarkup = parseInt(elements.markup.value) || 0;
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        const finalPrice = totalDelivery + userMarkup;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        displayResult({
            landCost,
            oceanCost,
            dealerFee,
            portServices,
            totalDelivery,
            userMarkup,
            finalPrice
        });
        
    } catch (error) {
        displayError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.');
        console.error('Calculation error:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function displayResult(prices) {
    let breakdownHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤
    if (prices.landCost > 0) {
        breakdownHTML += `<div class="price-item">
            <span>üöõ –î–æ—Å—Ç–∞–≤–∫–∞ —Å—É—à–∞:</span>
            <span>$${prices.landCost}</span>
        </div>`;
    }
    
    if (prices.oceanCost > 0) {
        breakdownHTML += `<div class="price-item">
            <span>üö¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–∫–µ–∞–Ω:</span>
            <span>$${prices.oceanCost}</span>
        </div>`;
    }
    
    if (prices.dealerFee > 0) {
        breakdownHTML += `<div class="price-item">
            <span>üè¢ –£—Å–ª—É–≥–∏ –¥–∏–ª–µ—Ä–∞:</span>
            <span>$${prices.dealerFee}</span>
        </div>`;
    }
    
    if (prices.portServices > 0) {
        breakdownHTML += `<div class="price-item">
            <span>‚öì –ü–æ—Ä—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏:</span>
            <span>$${prices.portServices}</span>
        </div>`;
    }
    
    breakdownHTML += `<div class="price-item">
        <span>üìã –ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞:</span>
        <span><strong>$${prices.totalDelivery}</strong></span>
    </div>`;
    
    if (prices.userMarkup > 0) {
        breakdownHTML += `<div class="price-item markup">
            <span>üí∞ –í–∞—à–∞ –Ω–∞—Ü–µ–Ω–∫–∞:</span>
            <span>$${prices.userMarkup}</span>
        </div>`;
    }
    
    breakdownHTML += `<div class="price-item total">
        <span>üéØ –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ:</span>
        <span>$${prices.finalPrice}</span>
    </div>`;
    
    elements.priceBreakdown.innerHTML = breakdownHTML;
    elements.finalAmount.textContent = `$${prices.finalPrice}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    elements.resultSection.classList.add('show');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ü–µ–Ω
    if (prices.finalPrice > 5000) {
        showWarning('–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å—é –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Ü–µ–Ω–∫–∏
function updateFinalPrice() {
    if (!elements.resultSection.classList.contains('show')) return;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        const totalItems = elements.priceBreakdown.querySelectorAll('.price-item');
        let totalDelivery = 0;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞"
        totalItems.forEach(item => {
            const text = item.textContent;
            if (text.includes('–ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞:')) {
                const priceMatch = text.match(/\$(\d+)/);
                if (priceMatch) {
                    totalDelivery = parseInt(priceMatch[1]);
                }
            }
        });
        
        const userMarkup = parseInt(elements.markup.value) || 0;
        const finalPrice = totalDelivery + userMarkup;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –∏ –∏—Ç–æ–≥–∞
        const markupItem = elements.priceBreakdown.querySelector('.price-item.markup span:last-child');
        const totalItem = elements.priceBreakdown.querySelector('.price-item.total span:last-child');
        
        if (markupItem) markupItem.textContent = `$${userMarkup}`;
        if (totalItem) totalItem.textContent = `$${finalPrice}`;
        
        elements.finalAmount.textContent = `$${finalPrice}`;
        
    } catch (error) {
        console.error('Error updating final price:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏
function displayError(message) {
    elements.priceBreakdown.innerHTML = `<div class="error">
        <strong>‚ö†Ô∏è –û—à–∏–±–∫–∞:</strong> ${message}
    </div>`;
    
    elements.finalAmount.textContent = '$0';
    elements.resultSection.classList.add('show');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
function showWarning(message) {
    const warningDiv = document.createElement('div');
    warningDiv.className = 'warning';
    warningDiv.innerHTML = `<strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> ${message}`;
    elements.resultSection.appendChild(warningDiv);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    checkForm();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Enter
    document.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !elements.calculateBtn.disabled) {
            e.preventDefault();
            calculatePrice();
        }
    });
    
    console.log('Calculator initialized successfully');
    console.log('Available locations:', Object.keys(locationData).map(key => `${key}: ${locationData[key].length} locations`));
});
