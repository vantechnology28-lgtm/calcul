console.log('üîß Script.js starting...');

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
var elements = null;

// –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', function() {
    console.log('üì± Window loaded, starting init...');
    initCalculator();
});

function initCalculator() {
    console.log('üöÄ Initializing calculator...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (typeof locationData === 'undefined') {
        console.error('‚ùå locationData not found!');
        alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    console.log('‚úÖ Data check passed');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    elements = {
        auction: document.getElementById('auction'),
        location: document.getElementById('location'),
        portLoading: document.getElementById('portLoading'),
        portArrival: document.getElementById('portArrival'),
        destination: document.getElementById('destination'),
        calculateBtn: document.getElementById('calculateBtn'),
        markup: document.getElementById('markup'),
        resultSection: document.getElementById('resultSection'),
        priceBreakdown: document.getElementById('priceBreakdown'),
        finalAmount: document.getElementById('finalAmount')
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    for (var key in elements) {
        if (!elements[key]) {
            console.error('‚ùå Element not found:', key);
            return;
        }
    }
    
    console.log('‚úÖ All elements found');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupEvents();
    checkForm();
    
    console.log('üéâ Calculator ready!');
}

function setupEvents() {
    console.log('üîó Setting up events...');
    
    // –ê—É–∫—Ü–∏–æ–Ω
    elements.auction.onchange = function() {
        console.log('üè¢ Auction selected:', this.value);
        var auctionId = this.value;
        updateSelectedText('selectedAuction', this.options[this.selectedIndex].text);
        
        if (auctionId) {
            loadLocations(auctionId);
            elements.location.disabled = false;
        } else {
            clearLocationSelect();
        }
        checkForm();
    };
    
    // –õ–æ–∫–∞—Ü–∏—è
    elements.location.onchange = function() {
        console.log('üìç Location selected:', this.value);
        updateSelectedText('selectedLocation', this.options[this.selectedIndex].text);
        
        if (this.value) {
            loadPorts();
            elements.portLoading.disabled = false;
        } else {
            clearPortSelect();
        }
        checkForm();
    };
    
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    elements.destination.onchange = function() {
        console.log('üåç Destination selected:', this.value);
        
        if (this.value) {
            loadArrivalPorts(this.value);
            elements.portArrival.disabled = false;
        } else {
            clearArrivalPortSelect();
        }
        checkForm();
    };
    
    // –ü–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elements.portLoading.onchange = function() {
        console.log('üö¢ Loading port selected:', this.value);
        updateSelectedText('selectedPortLoading', this.options[this.selectedIndex].text);
        checkForm();
    };
    
    // –ü–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è
    elements.portArrival.onchange = function() {
        console.log('‚öì Arrival port selected:', this.value);
        updateSelectedText('selectedPortArrival', this.options[this.selectedIndex].text);
        checkForm();
    };
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
    elements.calculateBtn.onclick = function() {
        if (!this.disabled) {
            console.log('üßÆ Calculate clicked');
            calculatePrice();
        }
    };
    
    // –ù–∞—Ü–µ–Ω–∫–∞
    elements.markup.oninput = function() {
        if (elements.resultSection.classList.contains('show')) {
            updateFinalPrice();
        }
    };
}

function loadLocations(auctionId) {
    console.log('üìç Loading locations for auction:', auctionId);
    
    var locations = locationData[auctionId] || [];
    console.log('üìç Found', locations.length, 'locations');
    
    elements.location.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
    
    for (var i = 0; i < locations.length; i++) {
        var location = locations[i];
        var option = document.createElement('option');
        option.value = location.value;
        option.textContent = location.text;
        option.setAttribute('data-land-cost', location.landCost);
        elements.location.appendChild(option);
    }
    
    console.log('‚úÖ Locations loaded successfully');
}

function loadPorts() {
    console.log('üö¢ Loading ports...');
    
    elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>';
    
    var ports = portData.loading;
    for (var i = 0; i < ports.length; i++) {
        var port = ports[i];
        var option = document.createElement('option');
        option.value = port.value;
        option.textContent = port.text;
        elements.portLoading.appendChild(option);
    }
    
    console.log('‚úÖ Ports loaded');
}

function loadArrivalPorts(destination) {
    console.log('‚öì Loading arrival ports for:', destination);
    
    elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è</option>';
    
    var ports = portData.arrival[destination] || [];
    for (var i = 0; i < ports.length; i++) {
        var port = ports[i];
        var option = document.createElement('option');
        option.value = port.value;
        option.textContent = port.text;
        elements.portArrival.appendChild(option);
    }
    
    console.log('‚úÖ Arrival ports loaded');
}

function clearLocationSelect() {
    elements.location.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω</option>';
    elements.location.disabled = true;
    updateSelectedText('selectedLocation', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞');
    clearPortSelect();
}

function clearPortSelect() {
    elements.portLoading.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é</option>';
    elements.portLoading.disabled = true;
    updateSelectedText('selectedPortLoading', '–ù–µ –≤—ã–±—Ä–∞–Ω');
}

function clearArrivalPortSelect() {
    elements.portArrival.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>';
    elements.portArrival.disabled = true;
    updateSelectedText('selectedPortArrival', '–ù–µ –≤—ã–±—Ä–∞–Ω');
}

function updateSelectedText(elementId, text) {
    var element = document.getElementById(elementId);
    if (element) {
        element.textContent = text || '–ù–µ –≤—ã–±—Ä–∞–Ω';
    }
}

function checkForm() {
    var isComplete = elements.auction.value && 
                    elements.location.value && 
                    elements.portLoading.value && 
                    elements.destination.value &&
                    elements.portArrival.value;
    
    elements.calculateBtn.disabled = !isComplete;
    
    if (isComplete) {
        elements.calculateBtn.style.background = 'linear-gradient(135deg, #27ae60 0%, #2ecc71 100%)';
        elements.calculateBtn.innerHTML = 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å';
    } else {
        elements.calculateBtn.style.background = 'linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%)';
        elements.calculateBtn.innerHTML = 'üîí –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
    }
}

function calculatePrice() {
    console.log('üßÆ Calculating price...');
    
    try {
        var auctionId = elements.auction.value;
        var destination = elements.destination.value;
        var portLoadingId = elements.portLoading.value;
        var portArrivalId = elements.portArrival.value;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É—à–∏
        var selectedLocationOption = elements.location.options[elements.location.selectedIndex];
        var landCost = parseInt(selectedLocationOption.getAttribute('data-land-cost')) || 0;
        
        console.log('üöõ Land cost:', landCost);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–µ–∞–Ω–∞
        var oceanCost = 0;
        if (oceanPrices[destination] && oceanPrices[destination][portArrivalId]) {
            oceanCost = oceanPrices[destination][portArrivalId][portLoadingId] || 0;
        }
        
        console.log('üö¢ Ocean cost:', oceanCost);
        
        // SUBLOT –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (auctionId === '30' || auctionId === '31') {
            showError('SUBLOT –∞—É–∫—Ü–∏–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (landCost === 0 && oceanCost === 0) {
            showError('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }
        
        // –†–∞—Å—á–µ—Ç
        var dealerFee = 100;
        var portServices = destination === 'Lithuania' ? 300 : 0;
        var totalDelivery = landCost + oceanCost + dealerFee + portServices;
        var userMarkup = parseInt(elements.markup.value) || 0;
        var finalPrice = totalDelivery + userMarkup;
        
        console.log('üí∞ Final calculation:', {
            landCost: landCost,
            oceanCost: oceanCost,
            dealerFee: dealerFee,
            portServices: portServices,
            totalDelivery: totalDelivery,
            userMarkup: userMarkup,
            finalPrice: finalPrice
        });
        
        showResult({
            landCost: landCost,
            oceanCost: oceanCost,
            dealerFee: dealerFee,
            portServices: portServices,
            totalDelivery: totalDelivery,
            userMarkup: userMarkup,
            finalPrice: finalPrice
        });
        
    } catch (error) {
        console.error('‚ùå Calculation error:', error);
        showError('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: ' + error.message);
    }
}

function showResult(prices) {
    console.log('üìã Showing results');
    
    var html = '';
    
    if (prices.landCost > 0) {
        html += '<div class="price-item"><span>üöõ –î–æ—Å—Ç–∞–≤–∫–∞ —Å—É—à–∞:</span><span>$' + prices.landCost + '</span></div>';
    }
    
    if (prices.oceanCost > 0) {
        html += '<div class="price-item"><span>üö¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–∫–µ–∞–Ω:</span><span>$' + prices.oceanCost + '</span></div>';
    }
    
    if (prices.dealerFee > 0) {
        html += '<div class="price-item"><span>üè¢ –£—Å–ª—É–≥–∏ –¥–∏–ª–µ—Ä–∞:</span><span>$' + prices.dealerFee + '</span></div>';
    }
    
    if (prices.portServices > 0) {
        html += '<div class="price-item"><span>‚öì –ü–æ—Ä—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏:</span><span>$' + prices.portServices + '</span></div>';
    }
    
    html += '<div class="price-item"><span>üìã –ò—Ç–æ–≥–æ –¥–æ—Å—Ç–∞–≤–∫–∞:</span><span><strong>$' + prices.totalDelivery + '</strong></span></div>';
    
    if (prices.userMarkup > 0) {
        html += '<div class="price-item markup"><span>üí∞ –í–∞—à–∞ –Ω–∞—Ü–µ–Ω–∫–∞:</span><span>$' + prices.userMarkup + '</span></div>';
    }
    
    html += '<div class="price-item total"><span>üéØ –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ:</span><span>$' + prices.finalPrice + '</span></div>';
    
    elements.priceBreakdown.innerHTML = html;
    elements.finalAmount.textContent = '$' + prices.finalPrice;
    elements.resultSection.classList.add('show');
    
    console.log('‚úÖ Results displayed');
}

function showError(message) {
    console.log('‚ùå Showing error:', message);
    elements.priceBreakdown.innerHTML = '<div class="error"><strong>‚ö†Ô∏è –û—à–∏–±–∫–∞:</strong> ' + message + '</div>';
    elements.finalAmount.textContent = '$0';
    elements.resultSection.classList.add('show');
}

function updateFinalPrice() {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏
    var markupValue = parseInt(elements.markup.value) || 0;
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

console.log('‚úÖ Script.js loaded successfully');
